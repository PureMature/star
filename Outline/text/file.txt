outline: file
  `file` provides functions to interact with the file system. The library is inspired by file helpers from Amoy.

  path: file

  functions:
    trim_bom(rd) string
        Removes the Byte Order Mark (BOM) from a byte literal string or bytes.
        params:
          rd string|byes
            The string or bytes from which the BOM is to be removed
        examples:
          basic
              Removes the Byte Order Mark (BOM) from a string.
              code:
                  load("file", "trim_bom")
                  s = b'\xef\xbb\xbfhello'
                  print(trim_bom(s))
                  # Output: hello
              
    count_lines(name) int
        Counts the total lines in a file located at the provided path.
        params:
          name string
            The path of the file whose lines are to be counted
        examples:
          basic
              Count the lines of a file.
              code:
                  load("file", "count_lines")
                  name = 'path/to/file.txt'
                  print(count_lines(name))
                  # Output: 10

    head_lines(name, n) []string
        Returns the first 'n' lines of a file.
        params:
          name string
            The path of the file
          n int
            The number of lines from the top to be returned
        examples:
          basic
              Get the top 10 lines of a file.
              code:
                  load('file', 'head_lines')
                  print(head_lines('path/to/file.txt', 10))
                  # Output: ['line1', 'line2', ... 'line10']

    tail_lines(name, n) []string
        Returns the last 'n' lines of a file.
        params:
          name string
            The path of the file
          n int
            The number of lines from the bottom to be returned
        examples:
          basic
              Get the bottom 10 lines of a file.
              code:
                  load('file', 'tail_lines')
                  print(tail_lines('path/to/file.txt', 10))
                  # Output: ['line91', 'line92', ... 'line100']

    read_bytes(name)
        Reads a file and returns its contents as bytes.
        params:
          name string
            The path of the file to be read
        examples:
          basic
              Read a file in bytes.
              code:
                  load('file', 'read_bytes')
                  print(read_bytes('path/to/file.txt'))
                  # Output: b'file_content'

    read_string(name)
        Reads a file and returns its contents as string.
        params:
          name string
            The path of the file to be read
        examples:
          basic
              Read a file in string.
              code:
                  load('file', 'read_string')
                  print(read_string('path/to/file.txt'))
                  # Output: 'file_content'

    read_lines(name)
        Reads a file and returns its contents as a list of lines.
        params:
          name string
            The path of the file to be read
        examples:
          basic
              Get lines of a file in a list.
              code:
                  load('file', 'read_lines')
                  print(read_lines('path/to/file.txt'))
                  # Output: ['line1', 'line2', 'line3', ....]

    write_bytes(name, data)
        Writes/overwrites bytes or a byte literal string to a file. If the file isn't present, a new file would be created.
        params:
          name string
            The path of the file to be written to
          data string
            The byte literal string or bytes to be written to the file
        examples:
          basic
              Write a byte string to a file.
              code:
                  load('file', 'write_bytes')
                  name = 'new_file.txt'
                  data = b'Hello, This is a new file.'
                  write_bytes(name, data)

    write_string(name, data) 
        Writes/overwrites a string to a file. If the file isn't present, a new file would be created.
        params:
          name string
            The path of the file to be written to
          data string
            The string to be written to the file
        examples:
          basic
              Write a string to a file.
              code:
                  load('file', 'write_string')
                  write_string('new_file.txt', 'Hello, This is a new file.')

    write_lines(name, data)
        Writes/overwrites a list, tuple or set of lines to a file. If the file isn't present, a new file would be created.
        params:
          name string
            The path of the file to be written to
          data list|set|tuple
            The list, set or tuple of lines to be written to the file
        examples:
          List
              Write a list of lines to a file.
              code:
                  load('file', 'write_lines')
                  lines = ['This is line1', 'This is line2', 'This is line3']
                  write_lines('new_file.txt', lines)

    append_bytes(name, data)
        Appends bytes or a byte literal string to a file. If the file isn't present, a new file would be created.
        params:
          name string
            The path of the file to be written to
          data string
            The byte literal string or bytes to be appended to the file
        examples:
          basic
              Append a byte string to a file.
              code:
                  load('file', 'append_bytes')
                  append_bytes('existing_file.txt', b'Hello, This is appended data.')

    append_string(name, data) 
        Appends a string to a file. If the file isn't present, a new file would be created.
        params:
          name string
            The path of the file to be written to
          data string
            The string to be appended to the file
        examples:
          basic
              Append a string to a file.
              code:
                  load('file', 'append_string')
                  append_string('existing_file.txt', 'Hello, This is appended data.')

    append_lines(name, data)
        Appends a list, tuple or set of lines to a file. If the file isn't present, a new file would be created.
        params:
          name string
            The path of the file to be written to
          data list|set|tuple
            The list, set or tuple of lines to be appended to the file
        examples:
          basic
              Append a list of lines to a file.
              code:
                  load('file', 'append_lines')
                  append_lines('existing_file.txt', ['This is line1', 'This is line2', 'This is line3'])

    stat(name, follow=False) FileStat
        Returns a FileStat object representing information about the given file or directory.
        params:
          name string
              The path of the file or directory.
          follow bool
              If true, symbolic links are followed.
        examples:
          file information
              Retrieve information about a file.
              code:
                  load('file', 'stat')
                  info = stat('path/to/file.txt')
                  print(info.name, info.size, info.type)
                  # Output: file.txt 3759 file

          directory information
              Retrieve information about a directory.
              code:
                  load('file', 'stat')
                  info = stat('path/to/folder', follow=True)
                  print(info.name, info.size, info.type)
                  # Output: folder 448 dir

    copyfile(src, dst, overwrite=False) string
        Copies a file from source to destination, and returns the destination file path.
        If the destination exists and overwrite is set to False, an error is returned. If the destination is a directory, the file is copied into that directory with its original filename. Symbolic links are followed. Mode, access, and modification times are preserved.
        params:
          src string
            The path of the source file to be copied.
          dst string
            The path of the destination file or directory. The parent directory must exist.
          overwrite bool
            If true, allows overwriting the destination file if it exists. Defaults to False.
        examples:
          basic copy
              Copy a file to a new location without overwrite.
              code:
                  load('file', 'copyfile')
                  src = 'path/to/source.txt'
                  dst = 'path/to/destination.txt'
                  copyfile(src, dst)
                  # The file at 'path/to/source.txt' is copied to 'path/to/destination.txt'

          overwrite copy
              Copy a file to a new location with overwrite enabled.
              code:
                  load('file', 'copyfile')
                  src = 'path/to/source.txt'
                  dst = 'path/to/existing_destination.txt'
                  copyfile(src, dst, overwrite=True)
                  # The file at 'path/to/source.txt' is copied to 'path/to/existing_destination.txt', overwriting it.

          copy to directory
              Copy a file into a directory.
              code:
                  load('file', 'copyfile')
                  src = 'path/to/source.txt'
                  dst = 'path/to/directory'
                  copyfile(src, dst)
                  # The file at 'path/to/source.txt' is copied into 'path/to/directory' with its original filename.

  types:
    FileStat
        Represents information about a file.
        fields:
          name string
              The name of the file.
          path string
              The full path of the file.
          ext string
              The file extension.
          size int
              The size of the file in bytes.
          type string
              The type of the file: `file` for regular file, `dir` for directory, `symlink` for symbolic link, `fifo` for FIFO pipe, `socket` for network socket, `char` for character device file, `block` for block device file, `irregular` for irregular file type, `unknown` for unknown file type.
          modified time.Time
              The last modified time of the file.
          get_md5() function
              Returns the MD5 hash of the file contents.
          get_sha1() function
              Returns the SHA-1 hash of the file contents.
          get_sha256() function
              Returns the SHA-256 hash of the file contents.
          get_sha512() function
              Returns the SHA-512 hash of the file contents.
