outline: path
  `path` provides functions to manipulate directories and file paths. It is inspired by `pathlib` module from Mojo.

  path: path

  functions:
    abs(path) string
        Returns an absolute representation of path. If the path is not absolute it will be joined with the current working directory to turn it into an absolute path. The absolute path name for a given file is not guaranteed to be unique.
        params:
          path string
            The file path to be converted to its absolute form
        examples:
          basic
              Convert a relative path to an absolute path.
              code:
                  load("path", "abs")
                  p = abs('.')
                  print(p)
                  # Output: '/current/absolute/path'

    join(path, *paths) string
        Joins one or more path elements into a single path intelligently, separating them with an OS specific separator. Empty elements are ignored.
        params:
          paths... string
            The path elements to be joined
        examples:
          basic
              Join multiple path parts.
              code:
                  load("path", "join")
                  p = join('a', 'b', 'c')
                  print(p)
                  # Output: 'a/b/c'

    exists(path) bool
        Returns true if the path exists.
        params:
          path string
            The path to be checked
        examples:
          basic
              Check if a path exists.
              code:
                  load("path", "exists")
                  p = exists('path_test.go')
                  print(p)
                  # Output: True

    is_file(path) bool
        Returns true if the path exists and is a file.
        params:
          path string
            The path to be checked
        examples:
          basic
              Check if a path is a file.
              code:
                  load("path", "is_file")
                  p = is_file('path_test.go')
                  print(p)
                  # Output: True

    is_dir(path) bool
        Returns true if the path exists and is a directory.
        params:
          path string
            The path to be checked
        examples:
          basic
              Check if a path is a directory.
              code:
                  load("path", "is_dir")
                  p = is_dir('.')
                  print(p)
                  # Output: True

    is_link(path) bool
        Returns true if the path exists and is a symbolic link.
        params:
          path string
            The path to be checked
        examples:
          basic
              Check if a path is a symbolic link.
              code:
                  load("path", "is_link")
                  p = is_link('link_to_path_test.go')
                  print(p)
                  # Output: False

    listdir(path, recursive=False) []string
        Returns a list of directory contents.
        params:
          path string
            The directory path
          recursive bool
            If true, list contents recursively
        examples:
          basic
              List directory contents.
              code:
                  load("path", "listdir")
                  p = listdir('.')
                  print(p)
                  # Output: ['file1', 'file2', ...]

    getcwd() string
        Returns the current working directory.
        examples:
          basic
              Get the current working directory.
              code:
                  load("path", "getcwd")
                  p = getcwd()
                  print(p)
                  # Output: '/current/directory'

    chdir(path)
        Changes the current working directory.
        params:
          path string
            The path to the new current directory
        examples:
          basic
              Change the current working directory.
              code:
                  load("path", "chdir")
                  chdir('/new/directory')
                  # Current directory is now '/new/directory'

    mkdir(path, mode=0o755)
        Creates a directory with the given name. If the directory already exists, no error is thrown. It's capable of creating nested directories.
        params:
          path string
            The directory path to be created
          mode int
            The file mode (permissions) to use for the newly-created directory, represented as an octal number. Defaults to 0755.
        examples:
          default
              Create a new directory.
              code:
                  load("path", "mkdir")
                  mkdir('new_directory')
                  # New directory named 'new_directory' is created with default permissions
          permission
              Create a new directory with specific permissions.
              code:
                  load("path", "mkdir")
                  mkdir('secure_directory', 0o700)
                  # New directory named 'secure_directory' is created with permissions set to 0700
